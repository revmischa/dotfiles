# Zsh configuration managed by chezmoi

# History configuration
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
setopt HIST_VERIFY
setopt SHARE_HISTORY
setopt APPEND_HISTORY
setopt INC_APPEND_HISTORY
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_REDUCE_BLANKS
setopt HIST_IGNORE_SPACE

# Options
setopt AUTO_CD              # Change to directory without cd
setopt GLOB_DOTS            # Include dotfiles in globbing
setopt EXTENDED_GLOB        # Extended globbing
setopt NO_BEEP              # No beeping
setopt PROMPT_SUBST         # Allow parameter expansion in prompts

# Completion system (initialize early)
autoload -Uz compinit

# Performance optimization: only check for new completions once per day
if [[ -n ${ZDOTDIR:-$HOME}/.zcompdump(#qN.mh+24) ]]; then
  compinit
else
  compinit -C
fi

# Antidote plugin manager
# Clone antidote if necessary and generate static plugin file
zsh_plugins=${ZDOTDIR:-$HOME}/.zsh_plugins
if [[ ! ${zsh_plugins}.zsh -nt ${zsh_plugins}.txt ]]; then
  # Clone antidote if necessary
  [[ -e ${ZDOTDIR:-$HOME}/.antidote ]] ||
    git clone --depth=1 https://github.com/mattmc3/antidote.git ${ZDOTDIR:-$HOME}/.antidote
  
  # Generate static plugin file
  source ${ZDOTDIR:-$HOME}/.antidote/antidote.zsh
  antidote bundle <${zsh_plugins}.txt >${zsh_plugins}.zsh
fi

# Source the static plugins file
source ${zsh_plugins}.zsh

# Case-insensitive completion
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'

# Additional completion styling
zstyle ':completion:*' menu select
zstyle ':completion:*' group-name ''
zstyle ':completion:*:descriptions' format '%F{yellow}-- %d --%f'
zstyle ':completion:*:warnings' format '%F{red}-- no matches found --%f'

# Enable completion caching
zstyle ':completion:*' use-cache yes
zstyle ':completion:*' cache-path ${ZDOTDIR:-$HOME}/.zcompcache

# Improve completion performance
zstyle ':completion:*' accept-exact '*(N)'
zstyle ':completion:*' squeeze-slashes true

# Better completion for kill command
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;34=0=01'
zstyle ':completion:*:*:*:*:processes' command "ps -u $USER -o pid,user,comm -w -w"

# Tool-specific completion configurations
# Load bash completion compatibility for tools that need it
autoload -U +X bashcompinit && bashcompinit

# Enable kubectl completion if available
if command -v kubectl >/dev/null 2>&1; then
  source <(kubectl completion zsh)
fi

# Enable AWS CLI completion if available
if command -v aws >/dev/null 2>&1; then
  complete -C aws_completer aws
fi

# Enable pip completion if available
if command -v pip >/dev/null 2>&1; then
  eval "$(pip completion --zsh)"
fi

# Enable pip3 completion if available
if command -v pip3 >/dev/null 2>&1; then
  eval "$(pip3 completion --zsh)"
fi

# Enable uv completion if available
if command -v uv >/dev/null 2>&1; then
  eval "$(uv generate-shell-completion zsh)"
fi

# Enable terraform completion if available
if command -v terraform >/dev/null 2>&1; then
  complete -o nospace -C terraform terraform
fi

# Enable tofu completion if available
if command -v tofu >/dev/null 2>&1; then
  complete -o nospace -C tofu tofu
fi

# Enable cargo completion if available
if command -v rustc >/dev/null 2>&1; then
  # Rust completions are usually installed with rustup
  [[ -f ~/.rustup/toolchains/*/etc/bash_completion.d/cargo ]] && source ~/.rustup/toolchains/*/etc/bash_completion.d/cargo
fi

# Docker completion styling
if command -v docker >/dev/null 2>&1; then
  zstyle ':completion:*:*:docker:*' option-stacking yes
  zstyle ':completion:*:*:docker-*:*' option-stacking yes
fi

# Key bindings for history substring search
# These will be available after the plugins are loaded
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
bindkey '^P' history-substring-search-up
bindkey '^N' history-substring-search-down

# Load aliases
[[ -f "$HOME/.aliases" ]] && source "$HOME/.aliases"

# Load git aliases
[[ -f "$HOME/.config/gitaliases.zsh" ]] && source "$HOME/.config/gitaliases.zsh"

# Load local configuration
[[ -f "$HOME/.zshrc.local" ]] && source "$HOME/.zshrc.local"

# Environment variables
export EDITOR="nvim"
export VISUAL="$EDITOR"

# Development paths
export PATH="$HOME/.local/bin:$PATH"
export PATH="$HOME/bin:$PATH"
# macOS specific configuration
export PATH="/opt/homebrew/bin:$PATH"
export PATH="/usr/local/bin:$PATH"

# Homebrew
if command -v brew >/dev/null 2>&1; then
    eval "$(brew shellenv)"
fi

# Node.js version manager
export NVM_DIR="$HOME/.nvm"
[[ -s "$NVM_DIR/nvm.sh" ]] && source "$NVM_DIR/nvm.sh"
[[ -s "$NVM_DIR/bash_completion" ]] && source "$NVM_DIR/bash_completion"

# pnpm
export PNPM_HOME="/Users/mish/Library/pnpm"
if [[ -n "$PNPM_HOME" ]]; then
  case ":$PATH:" in
    *":$PNPM_HOME:"*) ;;
    *) export PATH="$PNPM_HOME:$PATH" ;;
  esac
fi
# pnpm end

# Rust
[[ -f "$HOME/.cargo/env" ]] && source "$HOME/.cargo/env"

# Python virtual environments
export WORKON_HOME="$HOME/.virtualenvs"
[[ -f "/usr/local/bin/virtualenvwrapper.sh" ]] && source "/usr/local/bin/virtualenvwrapper.sh"

# Starship prompt
if command -v starship >/dev/null 2>&1; then
    eval "$(starship init zsh)"
fi

# fzf fuzzy finder
if command -v fzf >/dev/null 2>&1; then
    eval "$(fzf --zsh)"
fi

# Load zoxide if available
if command -v zoxide >/dev/null 2>&1; then
    eval "$(zoxide init zsh)"
fi

